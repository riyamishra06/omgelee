<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat</title>
    <link href="https://cdn.jsdelivr.net/npm/remixicon@4.3.0/fonts/remixicon.css" rel="stylesheet" />
    <link href="/css/style.css" rel="stylesheet">
    <style>
        :root {
            --bg-color: #E5E7EB;
            --text-color: #000000;
            --leave-btn-bg: rgb(255, 80, 80, 1);
            --accept-btn-bg: rgb(0, 200, 0, 1);
            --light-bg: #ffffff;
            --header-text: #000000;
            --control-bg: #E5E7EB;
            --control-text: #000000;
        }

        .dark-theme {
            --bg-color: #000000;
            --text-color: #ffffff;
            --leave-btn-bg: rgb(200, 0, 0, 1);
            --accept-btn-bg: rgb(0, 200, 0, 1);
            --light-bg: #141313;
            --header-text: #ffffff;
            --control-bg: #000000;
            --control-text: #ffffff;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            background-color: var(--bg-color);
            color: var(--text-color);
        }

        #videos {
            display: grid;
            grid-template-columns: 1fr;
            height: 100vh;
            overflow: hidden;
        }

        .video-player {
            background-color: var(--bg-color);
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .smallFrame {
            position: fixed;
            bottom: 100px;
            right: 20px;
            height: 170px;
            width: 300px;
            border-radius: 6px;
            z-index: 10;
        }

        #controls {
            position: fixed;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            display: flex;
            gap: 1em;
        }

        .control-container {
            border-radius: 50%;
            display: flex;
            justify-content: center;
            align-items: center;
            cursor: pointer;
        }

        #theme-toggle {
            background-color: var(--control-bg);
            color: var(--control-text);
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

        @media screen and (max-width: 600px) {
            .smallFrame {
                height: 80px;
                width: 120px;
            }
        }
    </style>
</head>

<body class="flex flex-col h-[100vh] w-full bg-gray-200">
    <%- include('partials/header') %>
        <div class="fixed videoblock hidden z-[222] w-full h-svh">
            <div id="videos">
                <video class="video-player bg-black" id="localVideo" autoplay muted playsinline></video>
                <video class="video-player bg-black" id="remoteVideo" autoplay playsinline></video>
            </div>
            <div id="controls" class="rounded-full bg-zinc-300 p-3">
                <div class="control-container text-2xl h-14 w-14 bg-black text-white" id="cameraButton">
                    <i class="ri-video-on-fill"></i>
                </div>
                <div class="control-container text-2xl h-14 w-14 bg-black text-white" id="micButton">
                    <i class="ri-mic-fill"></i>
                </div>
                <div class="control-container text-2xl h-14 w-14 bg-red-700 text-white" id="hangup">
                    <i class="ri-phone-fill"></i>
                </div>

            </div>
        </div>
        <div id="incoming-call" class="fixed hidden z-[222] w-full h-dvh bg-opacity-75 flex items-center justify-center"
            style="background-color: var(--bg-color);">
            <div class="p-8 rounded-md text-center"
                style="background-color: var(--light-bg); color: var(--text-color);">
                <p class="mb-4 text-blue-600">Incoming Call...</p>
                <button id="accept-call" class="text-white py-2 px-4 rounded-md"
                    style="background-color: var(--accept-btn-bg);">Accept</button>
                <button id="reject-call" class="text-white py-2 px-4 rounded-md ml-2"
                    style="background-color: var(--leave-btn-bg);">Reject</button>
            </div>
        </div>
        <div id="outgoing-call" class="fixed hidden z-[222] w-full h-dvh bg-opacity-75 flex items-center justify-center"
            style="background-color: var(--bg-color);">
            <div class="p-8 w-[60%] sm:w-fit flex flex-col items-center justify-center rounded-md text-center"
                style="background-color: var(--light-bg); color: var(--text-color);">
                <h3 class="mb-2 text-blue-600">Outgoing Call...</h3>
                <p class="text-center">Waiting for the other user's response...</p>
            </div>
        </div>
        <main class="flex-1 p-4 overflow-y-auto relative" id="message-container"
            style="background-color: var(--bg-color); color: var(--text-color);">
            <div class="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-2/3 text-center nobody"
                style="color: var(--secondary-text-color);">
                You're not connected to anyone yet. Please waitâ€”someone will join you soon!
            </div>
            <div
                class="absolute hidden top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-2/3 text-center text-green-600 somebody">
                Someone has joined! You can now start a new conversation.
            </div>
        </main>
        <form id="chatform" class="p-4 flex" style="background-color: var(--light-bg);">
            <input type="hidden" id="userid" value="">
            <input type="text" id="messagebox"
                class="flex-1 border rounded-md px-3 py-2 bg-transparent focus:outline-none sm:text-sm"
                placeholder="Type a message">
            <button type="submit" class="ml-2 text-white bg-blue-600 py-2 px-4 rounded-md">Send</button>
        </form>


        <script src="https://cdn.socket.io/4.7.5/socket.io.min.js"
            integrity="sha384-2huaZvOR9iDzHqslqwpR87isEmrfxqyWOF7hr7BY6KG0+hVKLoEXMPUJw3ynWuhO"
            crossorigin="anonymous"></script>

        <script>
            const socket = io();
            let room;
            const chatform = document.querySelector("#chatform");
            const messagebox = document.querySelector("#messagebox");
            const messagecontainer = document.querySelector("#message-container");
            const hangupButton = document.querySelector("#hangup");

            document.querySelector('#micButton').addEventListener('click', toggleAudio);
            document.querySelector('#cameraButton').addEventListener('click', toggleVideo);

            socket.emit('joinroom');

            socket.on("joined", (roomname) => {
                room = roomname;
                document.querySelector(".nobody").classList.add("hidden");
                setTimeout(() => {
                    document.querySelector(".somebody").classList.remove("hidden");
                }, 1000);

                setTimeout(() => {
                    document.querySelector(".somebody").classList.add("hidden");
                }, 5000);

            })

            socket.on("message", (msg) => {
                receiveMessage(msg);
            })

            socket.on("typing", () => {
                // console.log("Typing...");
                document.querySelector(".typing").classList.remove("hidden");
                setTimeout(() => {
                    document.querySelector(".typing").classList.add("hidden");
                }, 2000);
            })

            chatform.addEventListener('input', (event) => {
                socket.emit("typing", { room })
            })

            chatform.addEventListener('submit', (event) => {
                event.preventDefault();
                socket.emit("message", { room, message: messagebox.value })
                attachMessage(messagebox.value);
                messagebox.value = "";
            })

            function attachMessage(message) {
                const userMessageContainer = document.createElement('div');
                userMessageContainer.classList.add('flex', 'my-2', 'justify-end');

                const userMessageDiv = document.createElement('div');
                userMessageDiv.classList.add('bg-blue-600', 'text-white', 'px-3', 'py-2', 'rounded-lg', 'max-w-xs');

                const userMessageText = document.createElement('p');
                userMessageText.textContent = message;

                userMessageDiv.appendChild(userMessageText);

                userMessageContainer.appendChild(userMessageDiv);

                document.getElementById('message-container').appendChild(userMessageContainer);

                document.querySelector("#message-container").scrollTop = document.querySelector("#message-container").scrollHeight;
            }

            function receiveMessage(message) {
                const messageContainer = document.createElement('div');
                messageContainer.classList.add('flex', 'my-2', 'justify-start');

                const messageDiv = document.createElement('div');
                messageDiv.classList.add('bg-zinc-600', 'text-white', 'px-3', 'py-2', 'rounded-lg', 'max-w-xs');

                const messageText = document.createElement('p');
                messageText.textContent = message;

                messageDiv.appendChild(messageText);

                messageContainer.appendChild(messageDiv);

                document.getElementById('message-container').appendChild(messageContainer);
                document.querySelector("#message-container").scrollTop = document.querySelector("#message-container").scrollHeight;
            }

            // WEBRTC START

            let localStream;
            let remoteStream;
            let peerConnection;
            let inCall = false;

            const rtcSettings = {
                iceServers: [{ urls: "stun:stun.l.google.com:19302" }]
            }

            const initialize = async () => {
                socket.on("signalingMessage", handleSignalingMessage);

                try {
                    localStream = await navigator.mediaDevices.getUserMedia({
                        audio: true,
                        video: true
                    });

                    document.querySelector("#localVideo").srcObject = localStream;
                    document.querySelector("#localVideo").style.display = "block";

                    initiateOffer();

                    inCall = true;
                } catch (error) {
                    console.log("Blocked by the browser " + error);
                }
            }

            const initiateOffer = async () => {
                await createPeerConnection();

                try {
                    const offer = await peerConnection.createOffer();
                    await peerConnection.setLocalDescription(offer);

                    socket.emit("signalingMessage", {
                        room,
                        message: JSON.stringify({
                            type: "offer",
                            offer
                        })
                    })
                } catch (error) {
                    console.log("error in creating offer " + error);
                }
            }

            const createPeerConnection = () => {
                peerConnection = new RTCPeerConnection(rtcSettings);

                remoteStream = new MediaStream();

                document.querySelector("#remoteVideo").srcObject = remoteStream;
                document.querySelector("#remoteVideo").style.display = "block";
                document.querySelector("#localVideo").classList.add("smallFrame");

                localStream.getTracks().forEach(track => {
                    peerConnection.addTrack(track, localStream);
                })

                peerConnection.ontrack = (event) => {
                    event.streams[0].getTracks().forEach(track => {
                        remoteStream.addTrack(track);
                    })
                }

                peerConnection.onicecandidate = (event) => {
                    if (event.candidate) {
                        // console.log("Sending Ice Candidates: ", event.candidate);

                        socket.emit("signalingMessage", {
                            room,
                            message: JSON.stringify({
                                type: "candidate",
                                candidate: event.candidate
                            })
                        })
                    }

                }

                // peerConnection.onconnectionstatechange = () => {
                //     console.log("Connection state:", peerConnection.connectionState)
                // }
                // peerConnection.onicegatheringstatechange = () => {
                //     console.log('ICE gathering state:', peerConnection.iceGatheringState);
                // };

                // peerConnection.oniceconnectionstatechange = () => {
                //     console.log('ICE connection state:', peerConnection.iceConnectionState);
                // };
            }

            const handleSignalingMessage = async (message) => {
                const { type, answer, offer, candidate } = JSON.parse(message);
                if (type === "offer") { await handleOffer(offer); }
                if (type === "answer") { await handleAnswer(answer); }
                if (type === "candidate" && peerConnection) {
                    try {
                        // const receivedCandidate = new RTCIceCandidate(candidate);
                        await peerConnection.addIceCandidate(candidate);
                    } catch (error) {
                        console.log(error);
                    }
                }

                if (type === "hangup") {
                    hangup();
                }
            }

            const handleOffer = async (offer) => {
                await createPeerConnection();

                try {
                    await peerConnection.setRemoteDescription(new RTCSessionDescription({ type: "offer", sdp: offer.sdp }));
                    // await peerConnection.setRemoteDescription(offer);
                    const answer = await peerConnection.createAnswer();
                    await peerConnection.setLocalDescription(answer);
                    // console.log('Sending offer:', offer);

                    socket.emit("signalingMessage", {
                        room,
                        message: JSON.stringify({
                            type: "answer",
                            answer
                        })
                    })

                    inCall = true;
                } catch (error) {
                    console.log("failed to handle offer " + error);
                }
            }

            const handleAnswer = async (answer) => {
                try {
                    await peerConnection.setRemoteDescription(new RTCSessionDescription({ type: "answer", sdp: answer.sdp }));
                    // console.log('Sending answer:', answer);
                } catch (error) {
                    console.log("failed to handle answer " + error);
                }
            }

            const videoCallButton = document.querySelector("#video-call-btn");
            if (videoCallButton) {
                videoCallButton.addEventListener("click", () => {
                    socket.emit("startVideoCall", { room });
                    document.querySelector("#outgoing-call").classList.remove("hidden");
                })
            }

            socket.on("incomingCall", () => {
                document.querySelector("#incoming-call").classList.remove("hidden");
            })

            socket.on("callAccepted", () => {
                initialize();
                document.querySelector(".videoblock").classList.remove("hidden");
                document.querySelector("#outgoing-call").classList.add("hidden");
            })

            socket.on("callRejected", () => {
                document.querySelector("#outgoing-call").classList.add("hidden");
                const notification = document.createElement("div");
                notification.textContent = "Call rejected by the other user";
                notification.classList.add("fixed", "text-center", "top-10", "left-1/2", "transform", "-translate-x-1/2", "bg-red-500", "text-white", "px-4", "py-2", "rounded-md", "shadow-md", "z-50");
                document.body.appendChild(notification);
                setTimeout(() => {
                    notification.remove();
                }, 3000);
                document.querySelector("#outgoing-call").classList.add("hidden");
            })

            const acceptCallButton = document.querySelector("#accept-call");
            if (acceptCallButton) {
                acceptCallButton.addEventListener("click", () => {
                    document.querySelector("#incoming-call").classList.add("hidden");
                    initialize();
                    document.querySelector(".videoblock").classList.remove("hidden");
                    socket.emit("acceptCall", { room })
                })
            }

            const rejectCallButton = document.querySelector("#reject-call");
            if (rejectCallButton) {
                rejectCallButton.addEventListener("click", () => {
                    document.querySelector("#incoming-call").classList.add("hidden");
                    socket.emit("rejectCall", { room })
                })
            }

            const cancelCallButton = document.querySelector("#cancel-call");
            if (cancelCallButton) {
                cancelCallButton.addEventListener("click", () => {
                    document.querySelector("#outgoing-call").classList.add("hidden");
                })
            }


            if (hangupButton) {
                hangupButton.addEventListener("click", () => {
                    hangup();
                })
            }

            const hangup = () => {
                if (peerConnection) {
                    peerConnection.close();
                    peerConnection = null;
                    if (localStream) {
                        localStream.getTracks().forEach(track => track.stop());
                    }
                    document.querySelector(".videoblock").classList.add("hidden");
                    socket.emit("signalingMessage", {
                        room,
                        message: JSON.stringify({
                            type: "hangup"
                        })
                    });
                    inCall = false;
                }
            }

            function toggleAudio() {
                const audioTracks = localStream.getAudioTracks();
                if (audioTracks.length > 0) {
                    const isEnabled = audioTracks[0].enabled;
                    audioTracks[0].enabled = !isEnabled;
                    document.querySelector('#micButton').classList.toggle('muted', isEnabled);
                    const micIcon = document.querySelector('#micButton i');
                    if (isEnabled) {
                        micIcon.classList.replace('ri-mic-fill', 'ri-mic-off-fill');
                    } else {
                        micIcon.classList.replace('ri-mic-off-fill', 'ri-mic-fill');
                    }
                }
            }

            function toggleVideo() {
                const videoTracks = localStream.getVideoTracks();
                if (videoTracks.length > 0) {
                    const isEnabled = videoTracks[0].enabled;
                    videoTracks[0].enabled = !isEnabled;
                    document.querySelector('#cameraButton').classList.toggle('stopped', isEnabled);
                    const cameraIcon = document.querySelector('#cameraButton i');
                    if (isEnabled) {
                        cameraIcon.classList.replace('ri-video-on-fill', 'ri-video-off-fill');
                    } else {
                        cameraIcon.classList.replace('ri-video-off-fill', 'ri-video-on-fill');
                    }
                }
            }

            function toggleTheme() {
                document.body.classList.toggle('dark-theme');
            }
        </script>
</body>

</html>